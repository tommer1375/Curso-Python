{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Medium;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 HelveticaNeue-Italic;
\f3\fnil\fcharset0 HelveticaNeue-Bold;\f4\fnil\fcharset0 HelveticaNeue-MediumItalic;}
{\colortbl;\red255\green255\blue255;\red27\green35\blue47;\red38\green38\blue38;\red250\green250\blue250;
}
{\*\expandedcolortbl;;\cssrgb\c13725\c18431\c24314;\cssrgb\c20000\c20000\c20000;\cssrgb\c98431\c98431\c98431;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh16580\viewkind0
\deftab720
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl860\sa300\partightenfactor0

\f0\fs67\fsmilli33600 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\'bfQu\'e9 es API RESTful?\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\partightenfactor0

\f1\fs33\fsmilli16800 \cf3 \ul \ulc3 \strokec3 La API RESTful es una interfaz que dos sistemas de computaci\'f3n utilizan para intercambiar informaci\'f3n de manera segura a trav\'e9s de Internet. La mayor\'eda de las aplicaciones para empresas deben comunicarse con otras aplicaciones internas o de terceros para llevar a cabo varias tareas.\ulnone  Por ejemplo, para generar n\'f3minas mensuales, su sistema interno de cuentas debe compartir datos con el sistema bancario de su cliente para automatizar la facturaci\'f3n y comunicarse con una aplicaci\'f3n interna de planillas de horarios. Las API RESTful admiten este intercambio de informaci\'f3n porque siguen est\'e1ndares de comunicaci\'f3n de\'a0
\f2\i software
\f1\i0 \'a0seguros, confiables y eficientes.\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl860\sa300\partightenfactor0

\f0\fs67\fsmilli33600 \cf2 \cb4 \strokec2 \'bfQu\'e9 es una API?\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\fs33\fsmilli16800 \cf3 \cb4 \strokec3 Una interfaz de programa de aplicaci\'f3n (API) define las reglas que se deben seguir para comunicarse con otros sistemas de software. Los desarrolladores exponen o crean API para que otras aplicaciones puedan comunicarse con sus aplicaciones mediante programaci\'f3n. Por ejemplo, la aplicaci\'f3n de planilla de horarios expone una API que solicita el nombre completo de un empleado y un rango de fechas. Cuando recibe esta informaci\'f3n, procesa internamente la planilla de horarios del empleado y devuelve la cantidad de horas trabajadas en ese rango de fechas.\cb1 \
\cb4 Se puede pensar en una API web como una puerta de enlace entre los clientes y los recursos de la Web.\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl620\sa393\partightenfactor0

\f3\b\fs39\fsmilli19656 \cf3 \cb4 Clientes\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\b0\fs33\fsmilli16800 \cf3 \cb4 Los clientes son usuarios que desean acceder a informaci\'f3n desde la Web. El cliente puede ser una persona o un sistema de\'a0
\f2\i software
\f1\i0 \'a0que utiliza la API. Por ejemplo, los desarrolladores pueden escribir programas que accedan a los datos del tiempo desde un sistema de clima. Tambi\'e9n se puede acceder a los mismos datos desde el navegador cuando se visita directamente el sitio web de clima.\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl620\sa393\partightenfactor0

\f3\b\fs39\fsmilli19656 \cf3 \cb4 Recursos\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\partightenfactor0

\f1\b0\fs33\fsmilli16800 \cf3 \cb4 Los recursos son la informaci\'f3n que diferentes aplicaciones proporcionan a sus clientes. Los recursos pueden ser im\'e1genes, videos, texto, n\'fameros o cualquier tipo de datos. La m\'e1quina encargada de entregar el recurso al cliente tambi\'e9n recibe el nombre de servidor. Las organizaciones utilizan las API para compartir recursos y proporcionar servicios web, a la vez que mantienen la seguridad, el control y la autenticaci\'f3n. Adem\'e1s, las API las ayudan a determinar qu\'e9 clientes obtienen acceso a recursos internos espec\'edficos.\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl860\sa300\partightenfactor0

\f0\fs67\fsmilli33600 \cf2 \strokec2 \'bfQu\'e9 es REST?\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\fs33\fsmilli16800 \cf3 \strokec3 La transferencia de estado representacional (REST) es una arquitectura de software que impone condiciones sobre c\'f3mo debe funcionar una API. En un principio, REST se cre\'f3 como una gu\'eda para administrar la comunicaci\'f3n en una red compleja como Internet. Es posible utilizar una arquitectura basada en REST para admitir comunicaciones confiables y de alto rendimiento a escala. Puede implementarla y modificarla f\'e1cilmente, lo que brinda visibilidad y portabilidad entre plataformas a cualquier sistema de API.\
Los desarrolladores de API pueden dise\'f1ar API por medio de varias arquitecturas diferentes. Las API que siguen el estilo arquitect\'f3nico de REST se llaman API\'a0REST. Los servicios web que implementan una arquitectura de REST son llamados servicios web RESTful. El t\'e9rmino API RESTful suele referirse a las API web RESTful. Sin embargo, los t\'e9rminos API\'a0REST y API\'a0RESTful se pueden utilizar de forma intercambiable.\
A continuaci\'f3n, se presentan algunos de los principios del estilo arquitect\'f3nico de REST:\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl620\sa393\partightenfactor0

\f3\b\fs39\fsmilli19656 \cf3 Interfaz uniforme\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\b0\fs33\fsmilli16800 \cf3 La interfaz uniforme es fundamental para el dise\'f1o de cualquier servicio web RESTful. Ella indica que el servidor transfiere informaci\'f3n en un formato est\'e1ndar. El recurso formateado se denomina representaci\'f3n en REST. Este formato puede ser diferente de la representaci\'f3n interna del recurso en la aplicaci\'f3n del servidor. Por ejemplo, el servidor puede almacenar los datos como texto, pero enviarlos en un formato de representaci\'f3n HTML.\
La interfaz uniforme impone cuatro limitaciones de arquitectura:\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa200\partightenfactor0
\ls1\ilvl0\cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Las solicitudes deben identificar los recursos. Lo hacen mediante el uso de un identificador uniforme de recursos.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Los clientes tienen informaci\'f3n suficiente en la representaci\'f3n del recurso como para modificarlo o eliminarlo si lo desean. El servidor cumple esta condici\'f3n por medio del env\'edo de los metadatos que describen el recurso con mayor detalle.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Los clientes reciben informaci\'f3n sobre c\'f3mo seguir procesando la representaci\'f3n. El servidor logra esto enviando mensajes autodescriptivos que contienen metadatos sobre c\'f3mo el cliente puede utilizarlos de mejor manera.\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\partightenfactor0
\ls1\ilvl0\cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Los clientes reciben informaci\'f3n sobre todos los dem\'e1s recursos relacionados que necesitan para completar una tarea. El servidor logra esto enviando hiperv\'ednculos en la representaci\'f3n para que los clientes puedan descubrir din\'e1micamente m\'e1s recursos.\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl620\sa393\partightenfactor0

\f3\b\fs39\fsmilli19656 \cf3 Tecnolog\'eda sin estado\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\b0\fs33\fsmilli16800 \cf3 En la arquitectura de REST, la tecnolog\'eda sin estado se refiere a un m\'e9todo de comunicaci\'f3n en el cual el servidor completa todas las solicitudes del cliente independientemente de todas las solicitudes anteriores. Los clientes pueden solicitar recursos en cualquier orden, y todas las solicitudes son sin estado o est\'e1n aisladas del resto. Esta limitaci\'f3n del dise\'f1o de la API\'a0REST implica que el servidor puede comprender y cumplir por completo la solicitud todas las veces.\'a0\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl620\sa393\partightenfactor0

\f3\b\fs39\fsmilli19656 \cf3 Sistema por capas\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\b0\fs33\fsmilli16800 \cf3 En una arquitectura de sistema por capas, el cliente puede conectarse con otros intermediarios autorizados entre el cliente y el servidor y todav\'eda recibir\'e1 respuestas del servidor. Los servidores tambi\'e9n pueden pasar las solicitudes a otros servidores. Es posible dise\'f1ar el servicio web RESTful para que se ejecute en varios servidores con m\'faltiples capas, como la seguridad, la aplicaci\'f3n y la l\'f3gica empresarial, que trabajan juntas para cumplir las solicitudes de los clientes. Estas capas se mantienen invisibles para el cliente.\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl620\sa393\partightenfactor0

\f3\b\fs39\fsmilli19656 \cf3 Almacenamiento en cach\'e9\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\b0\fs33\fsmilli16800 \cf3 Los servicios web RESTful admiten el almacenamiento en cach\'e9, que es el proceso de almacenar algunas respuestas en la memoria cach\'e9 del cliente o de un intermediario para mejorar el tiempo de respuesta del servidor. Por ejemplo, suponga que visita un sitio web que tiene im\'e1genes comunes en el encabezado y el pie de p\'e1gina en todas las p\'e1ginas. Cada vez que visita una nueva p\'e1gina del sitio web, el servidor debe volver a enviar las mismas im\'e1genes. Para evitar esto, el cliente guarda en la memoria cach\'e9 o almacena estas im\'e1genes despu\'e9s de la primera respuesta y, luego, utiliza las im\'e1genes directamente desde la memoria cach\'e9. Los servicios web RESTful controlan el almacenamiento en cach\'e9 mediante el uso de respuestas de la API que se pueden guardar en la memoria cach\'e9 o no.\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl620\sa393\partightenfactor0

\f3\b\fs39\fsmilli19656 \cf3 C\'f3digo bajo demanda\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\partightenfactor0

\f1\b0\fs33\fsmilli16800 \cf3 En el estilo de arquitectura de REST, los servidores pueden extender o personalizar temporalmente la funcionalidad del cliente transfiriendo a este el c\'f3digo de programaci\'f3n del\'a0
\f2\i software
\f1\i0 . Por ejemplo, cuando completa un formulario de inscripci\'f3n en cualquier sitio web, su navegador resalta de inmediato cualquier error que usted comete, como un n\'famero de tel\'e9fono incorrecto. El navegador puede hacer esto gracias al c\'f3digo enviado por el servidor.\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl860\sa300\partightenfactor0

\f0\fs67\fsmilli33600 \cf2 \cb4 \strokec2 \'bfQu\'e9 beneficios ofrecen las API RESTful?\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\fs33\fsmilli16800 \cf3 \cb4 \strokec3 Las API RESTful incluyen los siguientes beneficios:\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl620\sa393\partightenfactor0

\f3\b\fs39\fsmilli19656 \cf3 \cb4 Escalabilidad\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\b0\fs33\fsmilli16800 \cf3 \cb4 Los sistemas que implementan API\'a0REST pueden escalar de forma eficiente porque REST optimiza las interacciones entre el cliente y el servidor. La tecnolog\'eda sin estado elimina la carga del servidor porque este no debe retener la informaci\'f3n de solicitudes pasadas del cliente. El almacenamiento en cach\'e9 bien administrado elimina de forma parcial o total algunas interacciones entre el cliente y el servidor. Todas estas caracter\'edsticas admiten la escalabilidad, sin provocar cuellos de botella en la comunicaci\'f3n que reduzcan el rendimiento.\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl620\sa393\partightenfactor0

\f3\b\fs39\fsmilli19656 \cf3 \cb4 Flexibilidad\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\b0\fs33\fsmilli16800 \cf3 \cb4 Los servicios web RESTful admiten una separaci\'f3n total entre el cliente y el servidor. Simplifican y desacoplan varios componentes del servidor, de manera que cada parte pueda evolucionar de manera independiente. Los cambios de la plataforma o la tecnolog\'eda en la aplicaci\'f3n del servidor no afectan la aplicaci\'f3n del cliente. La capacidad de ordenar en capas las funciones de la aplicaci\'f3n aumenta la flexibilidad a\'fan m\'e1s. Por ejemplo, los desarrolladores pueden efectuar cambios en la capa de la base de datos sin tener que volver a escribir la l\'f3gica de la aplicaci\'f3n.\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl620\sa393\partightenfactor0

\f3\b\fs39\fsmilli19656 \cf3 \cb4 Independencia\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\partightenfactor0

\f1\b0\fs33\fsmilli16800 \cf3 \cb4 Las API REST son independientes de la tecnolog\'eda que se utiliza. Puede escribir aplicaciones del lado del cliente y del servidor en diversos lenguajes de programaci\'f3n, sin afectar el dise\'f1o de la API. Tambi\'e9n puede cambiar la tecnolog\'eda subyacente en cualquiera de los lados sin que se vea afectada la comunicaci\'f3n.\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl860\sa300\partightenfactor0

\f0\fs67\fsmilli33600 \cf2 \strokec2 \'bfC\'f3mo funcionan las API RESTful?\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\fs33\fsmilli16800 \cf3 \strokec3 La funci\'f3n b\'e1sica de una API RESTful es la misma que navegar por Internet. Cuando requiere un recurso, el cliente se pone en contacto con el servidor mediante la API. Los desarrolladores de API explican c\'f3mo el cliente debe utilizar la API\'a0REST en la documentaci\'f3n de la API de la aplicaci\'f3n del servidor. A continuaci\'f3n, se indican los pasos generales para cualquier llamada a la API\'a0REST:\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa200\partightenfactor0
\ls2\ilvl0\cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 El cliente env\'eda una solicitud al servidor. El cliente sigue la documentaci\'f3n de la API para dar formato a la solicitud de una manera que el servidor comprenda.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 El servidor autentica al cliente y confirma que este tiene el derecho de hacer dicha solicitud.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 El servidor recibe la solicitud y la procesa internamente.\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\partightenfactor0
\ls2\ilvl0\cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Luego, devuelve una respuesta al cliente. Esta respuesta contiene informaci\'f3n que dice al cliente si la solicitud se proces\'f3 de manera correcta. La respuesta tambi\'e9n incluye cualquier informaci\'f3n que el cliente haya solicitado.\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\partightenfactor0
\cf3 Los detalles de la solicitud y la respuesta de la API\'a0REST var\'edan un poco en funci\'f3n de c\'f3mo los desarrolladores de la API la hayan dise\'f1ado.\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl860\sa300\partightenfactor0

\f0\fs67\fsmilli33600 \cf2 \cb4 \strokec2 \'bfQu\'e9 contiene la solicitud del cliente de la API RESTful?\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\fs33\fsmilli16800 \cf3 \cb4 \strokec3 Las API\'a0RESTful requieren que las solicitudes contengan los siguientes componentes principales:\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl620\sa393\partightenfactor0

\f3\b\fs39\fsmilli19656 \cf3 \cb4 Identificador \'fanico de recursos\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\b0\fs33\fsmilli16800 \cf3 \cb4 El servidor identifica cada recurso con identificadores \'fanicos de recursos. En los servicios REST, el servidor por lo general identifica los recursos mediante el uso de un localizador uniforme de recursos (URL). El URL especifica la ruta hacia el recurso. Un URL es similar a la direcci\'f3n de un sitio web que se ingresa al navegador para visitar cualquier p\'e1gina web. El URL tambi\'e9n se denomina punto de conexi\'f3n de la solicitud y especifica con claridad al servidor qu\'e9 requiere el cliente.\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl620\sa393\partightenfactor0

\f3\b\fs39\fsmilli19656 \cf3 \cb4 M\'e9todo\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\b0\fs33\fsmilli16800 \cf3 \cb4 Los desarrolladores a menudo implementan API\'a0RESTful mediante el uso del protocolo de transferencia de hipertexto (HTTP). Un m\'e9todo de HTTP informa al servidor lo que debe hacer con el recurso. A continuaci\'f3n, se indican cuatro m\'e9todos de HTTP comunes:\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f4\i \cf3 \cb4 GET
\f1\i0 \cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0
\cf3 \cb4 Los clientes utilizan GET para acceder a los recursos que est\'e1n ubicados en el URL especificado en el servidor. Pueden almacenar en cach\'e9 las solicitudes GET y enviar par\'e1metros en la solicitud de la API\'a0RESTful para indicar al servidor que filtre los datos antes de enviarlos.\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f4\i \cf3 \cb4 POST
\f1\i0 \cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0
\cf3 \cb4 Los clientes usan POST para enviar datos al servidor. Incluyen la representaci\'f3n de los datos con la solicitud. Enviar la misma solicitud POST varias veces produce el efecto secundario de crear el mismo recurso varias veces.\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f4\i \cf3 \cb4 PUT
\f1\i0 \cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0
\cf3 \cb4 Los clientes utilizan PUT para actualizar los recursos existentes en el servidor. A diferencia de POST, el env\'edo de la misma solicitud PUT varias veces en un servicio web RESTful da el mismo resultado.\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f4\i \cf3 \cb4 DELETE
\f1\i0 \cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0
\cf3 \cb4 Los clientes utilizan la solicitud DELETE para eliminar el recurso. Una solicitud DELETE puede cambiar el estado del servidor. Sin embargo, si el usuario no cuenta con la autenticaci\'f3n adecuada, la solicitud fallar\'e1.\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl620\sa393\partightenfactor0

\f3\b\fs39\fsmilli19656 \cf3 \cb4 Encabezados de HTTP\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\b0\fs33\fsmilli16800 \cf3 \cb4 Los encabezados de solicitudes son los metadatos que se intercambian entre el cliente y el servidor. Por ejemplo, el encabezado de la solicitud indica el formato de la solicitud y la respuesta, proporciona informaci\'f3n sobre el estado de la solicitud, etc.\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f4\i \cf3 \cb4 Datos
\f1\i0 \cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0
\cf3 \cb4 Las solicitudes de la API\'a0REST pueden incluir datos para que los m\'e9todos POST, PUT y otros m\'e9todos HTTP funcionen de manera correcta.\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f4\i \cf3 \cb4 Par\'e1metros
\f1\i0 \cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0
\cf3 \cb4 Las solicitudes de la API\'a0RESTful pueden incluir par\'e1metros que brindan al servidor m\'e1s detalles sobre lo que se debe hacer. A continuaci\'f3n, se indican algunos tipos de par\'e1metros diferentes:\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa200\partightenfactor0
\ls3\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Los par\'e1metros de ruta especifican los detalles del URL.\cb1 \
\ls3\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Los par\'e1metros de consulta solicitan m\'e1s informaci\'f3n acerca del recurso.\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\partightenfactor0
\ls3\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Los par\'e1metros de cookie autentican a los clientes con rapidez.\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl860\sa300\partightenfactor0

\f0\fs67\fsmilli33600 \cf2 \strokec2 \'bfQu\'e9 son los m\'e9todos de autenticaci\'f3n de la API RESTful?\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\fs33\fsmilli16800 \cf3 \strokec3 Un servicio web RESTful debe autenticar las solicitudes antes de poder enviar una respuesta. La autenticaci\'f3n es el proceso de verificar una identidad. Por ejemplo, puede demostrar su identidad mostrando una tarjeta de identificaci\'f3n o una licencia de conducir. De forma similar, los clientes de los servicios RESTful deben demostrar su identidad al servidor para establecer confianza.\
La API\'a0RESTful tiene cuatro m\'e9todos comunes de autenticaci\'f3n:\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl620\sa393\partightenfactor0

\f3\b\fs39\fsmilli19656 \cf3 Autenticaci\'f3n HTTP\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\b0\fs33\fsmilli16800 \cf3 HTTP define algunos esquemas de autenticaci\'f3n que se pueden utilizar directamente cuando se implementa la API\'a0REST. A continuaci\'f3n, se indican dos de estos esquemas:\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f4\i \cf3 Autenticaci\'f3n b\'e1sica
\f1\i0 \
En la autenticaci\'f3n b\'e1sica, el cliente env\'eda el nombre y la contrase\'f1a del usuario en el encabezado de la solicitud. Los codifica con base64, que es una t\'e9cnica de codificaci\'f3n que convierte el par en un conjunto de 64\'a0caracteres para su transmisi\'f3n segura.\

\f4\i Autenticaci\'f3n del portador
\f1\i0 \
El t\'e9rmino autenticaci\'f3n del portador se refiere al proceso de brindar el control de acceso al portador del\'a0
\f2\i token
\f1\i0 . El\'a0
\f2\i token
\f1\i0 \'a0del portador suele ser una cadena de caracteres cifrada que genera el servidor como respuesta a una solicitud de inicio de sesi\'f3n. El cliente env\'eda el\'a0
\f2\i token
\f1\i0 \'a0en los encabezados de la solicitud para acceder a los recursos.\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl620\sa393\partightenfactor0

\f3\b\fs39\fsmilli19656 \cf3 Claves de la API\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\b0\fs33\fsmilli16800 \cf3 Las claves de la API son otra opci\'f3n para la autenticaci\'f3n de la API\'a0REST. En este enfoque, el servidor asigna un valor \'fanico generado a un cliente por primera vez. Cada vez que el cliente intenta acceder a los recursos, utiliza la clave de API \'fanica para su verificaci\'f3n. Las claves de API son menos seguras debido a que el cliente debe transmitir la clave, lo que la vuelve vulnerable al robo de red.\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl620\sa393\partightenfactor0

\f3\b\fs39\fsmilli19656 \cf3 OAuth\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\partightenfactor0

\f1\b0\fs33\fsmilli16800 \cf3 OAuth combina contrase\'f1as y\'a0
\f2\i tokens
\f1\i0 \'a0para el acceso de inicio de sesi\'f3n de alta seguridad a cualquier sistema. El servidor primero solicita una contrase\'f1a y luego solicita un\'a0
\f2\i token
\f1\i0 \'a0adicional para completar el proceso de autorizaci\'f3n. Puede verificar el token en cualquier momento y, tambi\'e9n, a lo largo del tiempo, con un alcance y duraci\'f3n espec\'edficos.\
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl860\sa300\partightenfactor0

\f0\fs67\fsmilli33600 \cf2 \cb4 \strokec2 \'bfQu\'e9 contiene la respuesta del servidor de la API RESTful?\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\fs33\fsmilli16800 \cf3 \cb4 \strokec3 Los principios de REST requieren que la respuesta del servidor contenga los siguientes componentes principales:\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl620\sa393\partightenfactor0

\f3\b\fs39\fsmilli19656 \cf3 \cb4 L\'ednea de estado\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\b0\fs33\fsmilli16800 \cf3 \cb4 La l\'ednea de estado contiene un c\'f3digo de estado de tres d\'edgitos que comunica si la solicitud se proces\'f3 de manera correcta o dio error. Por ejemplo, los c\'f3digos 2XX indican el procesamiento correcto, pero los c\'f3digos 4XX y 5XX indican errores. Los c\'f3digos 3XX indican la redirecci\'f3n de URL.\cb1 \
\cb4 A continuaci\'f3n, se enumeran algunos c\'f3digos de estado comunes:\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa200\partightenfactor0
\ls4\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 200: respuesta gen\'e9rica de procesamiento correcto\cb1 \
\ls4\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 201: respuesta de procesamiento correcto del m\'e9todo POST\cb1 \
\ls4\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 400: respuesta incorrecta que el servidor no puede procesar\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\partightenfactor0
\ls4\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 404: recurso no encontrado\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl620\sa393\partightenfactor0

\f3\b\fs39\fsmilli19656 \cf3 \cb4 Cuerpo del mensaje\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\sa300\partightenfactor0

\f1\b0\fs33\fsmilli16800 \cf3 \cb4 El cuerpo de la respuesta contiene la representaci\'f3n del recurso. El servidor selecciona un formato de representaci\'f3n adecuado en funci\'f3n de lo que contienen los encabezados de la solicitud. Los clientes pueden solicitar informaci\'f3n en los formatos XML o JSON, lo que define c\'f3mo se escriben los datos en texto sin formato. Por ejemplo, si el cliente solicita el nombre y la edad de una persona llamada John, el servidor devuelve una representaci\'f3n JSON como la siguiente:\cb1 \
\cb4 '\{"name":"John", "age":30\}'\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl620\sa393\partightenfactor0

\f3\b\fs39\fsmilli19656 \cf3 \cb4 Encabezados\cb1 \
\pard\tx739\pardeftab720\li969\fi10\ri-18552\sl520\partightenfactor0

\f1\b0\fs33\fsmilli16800 \cf3 \cb4 La respuesta tambi\'e9n contiene encabezados o metadatos acerca de la respuesta. Estos brindan m\'e1s contexto sobre la respuesta e incluyen informaci\'f3n como el servidor, la codificaci\'f3n, la fecha y el tipo de contenido.\cb1 \
}